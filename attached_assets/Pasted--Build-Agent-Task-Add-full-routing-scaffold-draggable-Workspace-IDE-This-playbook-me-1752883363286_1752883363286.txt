```
# 🛠️  Build-Agent Task: “Add full routing scaffold + draggable Workspace IDE”

This playbook merges **both** of ChatGPT’s latest implementation posts into your React + Vite repo.  
When done, every sidebar link will work and a new **/workspace** route will expose a multi-pane IDE (browser / code / logs) with drag-to-resize tiles.

────────────────────────────────────────────────
1 ░ Install new client dependencies
────────────────────────────────────────────────
# Run at repo root
pnpm add react-router-dom lucide-react
pnpm add react-mosaic-component @monaco-editor/react
pnpm add -D @types/react-mosaic-component

## (If TypeScript) enable DOM lib for react-router and Monaco
# tsconfig.json → compilerOptions
#   "lib": ["ES2023", "DOM"],
#   "jsx": "react-jsx",

────────────────────────────────────────────────
2 ░ Replace entry-point with BrowserRouter
────────────────────────────────────────────────
# FILE: src/main.tsx  (overwrite)
import React from "react";
import ReactDOM from "react-dom/client";
import { BrowserRouter } from "react-router-dom";
import App from "./App";
import "./index.css";

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>
);

────────────────────────────────────────────────
3 ░ Drop-in universal layout, pages & router
────────────────────────────────────────────────
# FILE: src/App.tsx  (new or replace)
import { Route, Routes, Navigate } from "react-router-dom";
import Layout from "./components/Layout";
import Dashboard from "./pages/Dashboard";
import Projects from "./pages/Projects";
import Analytics from "./pages/Analytics";
import Plugins from "./pages/Plugins";
import Globe from "./pages/Globe";
import Teams from "./pages/Teams";
import Templates from "./pages/Templates";
import Logs from "./pages/Logs";
import Settings from "./pages/Settings";
import Workspace from "./pages/Workspace";
import NotFound from "./pages/NotFound";

export default function App() {
  return (
    <Routes>
      <Route element={<Layout />}>
        <Route index element={<Dashboard />} />
        <Route path="/projects"   element={<Projects />} />
        <Route path="/analytics"  element={<Analytics />} />
        <Route path="/plugins"    element={<Plugins />} />
        <Route path="/globe"      element={<Globe />} />
        <Route path="/teams"      element={<Teams />} />
        <Route path="/templates"  element={<Templates />} />
        <Route path="/logs"       element={<Logs />} />
        <Route path="/settings"   element={<Settings />} />
        <Route path="/workspace"  element={<Workspace />} />
      </Route>

      <Route path="/"  element={<Navigate to="/" replace />} />
      <Route path="*" element={<NotFound />} />
    </Routes>
  );
}

# FILE: src/components/Layout.tsx
import { Outlet } from "react-router-dom";
import Sidebar from "./Sidebar";

export default function Layout() {
  return (
    <div className="flex h-screen w-screen overflow-hidden bg-zinc-900 text-zinc-100">
      <Sidebar />
      <main className="flex-1 overflow-y-auto px-4 py-6">
        <Outlet />
      </main>
    </div>
  );
}

# FILE: src/components/Sidebar.tsx
import { NavLink } from "react-router-dom";
import {
  GaugeCircle, FolderKanban, Activity, PlugZap, Globe, Users,
  FileText, FileBarChart2, Settings, LayoutTemplate
} from "lucide-react";

const links = [
  { to: "/",           label: "Dashboard", icon: GaugeCircle },
  { to: "/projects",   label: "Projects",  icon: FolderKanban },
  { to: "/analytics",  label: "Analytics", icon: Activity },
  { to: "/plugins",    label: "Plugins",   icon: PlugZap },
  { to: "/globe",      label: "Globe",     icon: Globe },
  { to: "/teams",      label: "Teams",     icon: Users },
  { to: "/templates",  label: "Templates", icon: FileText },
  { to: "/logs",       label: "Logs",      icon: FileBarChart2 },
  { to: "/settings",   label: "Settings",  icon: Settings },
  { to: "/workspace",  label: "Workspace", icon: LayoutTemplate }
];

export default function Sidebar() {
  return (
    <aside className="w-56 shrink-0 border-r border-zinc-800 bg-zinc-950 p-4">
      <h1 className="mb-6 flex items-center text-xl font-semibold">
        <span className="mr-2 rounded bg-emerald-400 px-2 py-1 font-black text-zinc-900">⚡</span>
        Clippr
      </h1>

      <nav className="space-y-1 text-sm">
        {links.map(({ to, label, icon: Icon }) => (
          <NavLink
            key={to}
            to={to}
            end={to === "/"}
            className={({ isActive }) =>
              `flex items-center gap-3 rounded px-3 py-2
               ${isActive ? "bg-zinc-800 text-emerald-400" : "hover:bg-zinc-800"}`
            }
          >
            <Icon size={18} />
            {label}
          </NavLink>
        ))}
      </nav>
    </aside>
  );
}

# FILES: src/pages/{Dashboard,Projects,Analytics,Plugins,Globe,Teams,Templates,Logs,Settings}.tsx
#   → stub each with:
export default function X() {
  return <h2 className="text-2xl font-bold">X page – content coming soon</h2>;
}

# FILE: src/pages/NotFound.tsx
import { Link } from "react-router-dom";
export default function NotFound() {
  return (
    <div className="flex h-full flex-col items-center justify-center gap-4">
      <p className="text-4xl font-bold text-red-500">404</p>
      <Link to="/" className="rounded bg-emerald-500 px-4 py-2 text-zinc-900">
        Back to dashboard
      </Link>
    </div>
  );
}

────────────────────────────────────────────────
4 ░ Modular IDE workspace
────────────────────────────────────────────────
# FILE: src/pages/Workspace.tsx
import { Mosaic, MosaicWindow } from "react-mosaic-component";
import "react-mosaic-component/react-mosaic-component.css";
import { useState } from "react";
import BrowserPane from "../workspace/BrowserPane";
import CodePane    from "../workspace/CodePane";
import LogsPane    from "../workspace/LogsPane";

type Tile = "browser" | "code" | "logs";
const DEFAULT_LAYOUT = {
  direction: "row",
  first: "browser",
  second: { direction: "column", first: "code", second: "logs", splitPercentage: 50 },
  splitPercentage: 55
};

export default function Workspace() {
  const [layout, setLayout] = useState(DEFAULT_LAYOUT);
  const render = (id: Tile) =>
    id === "browser" ? <BrowserPane /> : id === "code" ? <CodePane /> : <LogsPane />;

  return (
    <Mosaic<Tile>
      value={layout}
      onChange={setLayout}
      renderTile={(id, path) => (
        <MosaicWindow<Tile> path={path} title={id.toUpperCase()}>
          {render(id)}
        </MosaicWindow>
      )}
      className="!outline-none h-full"
    />
  );
}

# FILE: src/workspace/BrowserPane.tsx
import { useState } from "react";
export default function BrowserPane() {
  const [url, setUrl] = useState("https://example.com");
  return (
    <div className="flex h-full flex-col">
      <form onSubmit={e=>{e.preventDefault();setUrl((e.currentTarget.elements[0] as HTMLInputElement).value);}}
            className="flex items-center gap-2 border-b border-zinc-800 bg-zinc-900 px-2 py-1">
        <input defaultValue={url} className="w-full rounded bg-zinc-800 px-2 py-1 text-xs" />
        <button className="rounded bg-emerald-500 px-2 py-1 text-xs text-zinc-900">Go</button>
      </form>
      <iframe title="browser" src={url} className="flex-1 bg-white"
              sandbox="allow-scripts allow-same-origin allow-forms allow-popups"/>
    </div>
  );
}

# FILE: src/workspace/CodePane.tsx
import Editor from "@monaco-editor/react";
import { useState } from "react";
export default function CodePane() {
  const [code, set] = useState("// edit here");
  return <Editor height="100%" theme="vs-dark" defaultLanguage="javascript" value={code} onChange={v=>set(v??"")} options={{minimap:{enabled:false}}}/>;
}

# FILE: src/workspace/LogsPane.tsx
import { useEffect, useRef, useState } from "react";
export default function LogsPane() {
  const [lines,set]=useState<string[]>([]);
  const bottom=useRef<HTMLDivElement>(null);
  useEffect(()=>{
    const ws=new WebSocket(`${location.protocol==="https:"?"wss":"ws"}://${location.host}/api/logs`);
    ws.onmessage=e=>set(p=>[...p.slice(-400),e.data as string]);
    return()=>ws.close();
  },[]);
  useEffect(()=>bottom.current?.scrollIntoView({behavior:"auto"}),[lines]);
  return <pre className="h-full overflow-y-auto bg-zinc-950 p-2 text-xs leading-relaxed text-emerald-200">
    {lines.join("\n")}<div ref={bottom}/>
  </pre>;
}

────────────────────────────────────────────────
5 ░ Back-end WebSocket log tail (Express example)
────────────────────────────────────────────────
# server/index.ts  (append below your existing Express server)
import { WebSocketServer } from "ws";
import Tail from "tail";
const wss = new WebSocketServer({ noServer: true });

server.on("upgrade", (req, socket, head) => {
  if (req.url === "/api/logs") {
    wss.handleUpgrade(req, socket, head, ws => {
      const tail = new Tail.Tail("./logs/app.log");   // adjust path
      tail.on("line", line => ws.send(line));
      ws.on("close", () => tail.unwatch());
    });
  } else socket.destroy();
});

────────────────────────────────────────────────
6 ░ Verify locally
────────────────────────────────────────────────
pnpm dev
# open http://localhost:5173
# – all sidebar routes render (no 404 modal)
# – navigate to /workspace and drag panes around
# – browser pane loads URLs, code pane edits, logs stream via WS

────────────────────────────────────────────────
7 ░ Commit & push
────────────────────────────────────────────────
git add .
git commit -m "feat: universal routing + draggable workspace IDE"
git push origin YOUR_BRANCH
```
